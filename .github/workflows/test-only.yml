name: Test Only (No Deployment)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  APP_NAME: 'flask-excel-app'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest  # For testing
    
    - name: Run diagnostic script
      run: |
        echo "Running diagnostic script to identify issues..."
        python test_diagnostic.py
    
    - name: Run linting (optional)
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Run basic tests
      run: |
        # Create uploads directory if it doesn't exist
        mkdir -p uploads
        
        # Show Python version and environment
        echo "Python version:"
        python --version
        
        echo "Installed packages:"
        pip list
        
        echo "Current directory:"
        pwd
        ls -la
        
        echo "Test directory contents:"
        ls -la tests/
        
        echo "Requirements file:"
        cat requirements.txt
        
        # Try to import modules individually to identify issues
        echo "Testing imports:"
        python -c "import pandas; print('✓ pandas imported successfully')" || echo "✗ pandas import failed"
        python -c "import openpyxl; print('✓ openpyxl imported successfully')" || echo "✗ openpyxl import failed"
        python -c "import numpy; print('✓ numpy imported successfully')" || echo "✗ numpy import failed"
        python -c "import flask; print('✓ flask imported successfully')" || echo "✗ flask import failed"
        
        # Test app import specifically
        echo "Testing app import:"
        python -c "from app import app; print('✓ app imported successfully')" || echo "✗ app import failed"
        
        # Run basic tests first
        echo "Running basic tests first:"
        python -m pytest tests/test_basic.py -v -s --tb=long || {
          echo "Basic tests failed. Showing error output:"
          python -m pytest tests/test_basic.py -v -s --tb=long 2>&1
          exit 1
        }
        
        echo "Basic tests passed. Running full tests:"
        python -m pytest tests/test_app.py -v -s --tb=long --maxfail=1 || {
          echo "Full tests failed. Showing last 50 lines of error output:"
          python -m pytest tests/test_app.py -v -s --tb=long 2>&1 | tail -50
          exit 1
        }
        
        # Show test coverage if available
        echo "Running coverage report:"
        python -m pytest tests/ --cov=app --cov-report=term-missing || echo "No coverage report available"

  notify:
    needs: test
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify test status
      uses: 8398a7/action-slack@v3
      if: env.SLACK_WEBHOOK_URL != ''
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 