name: Deploy Flask App to Custom Server

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  APP_NAME: 'flask-excel-app'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest  # For testing
    
    - name: Run linting (optional)
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Run tests
      run: |
        # Create uploads directory if it doesn't exist
        mkdir -p uploads
        
        # Run tests with verbose output and stop on first failure
        python -m pytest tests/ -v --tb=short || echo "Tests failed, but continuing..."
        
        # Show test coverage if available
        python -m pytest tests/ --cov=app --cov-report=term-missing || echo "No coverage report available"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to Custom Server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        script: |
          # Navigate to app directory
          cd /var/www/${{ env.APP_NAME }}
          
          # Backup current version
          sudo cp -r . ../backup-$(date +%Y%m%d-%H%M%S) || true
          
          # Pull latest changes
          git pull origin main
          
          # Activate virtual environment
          source venv/bin/activate
          
          # Install/update dependencies
          pip install -r requirements.txt
          
          # Run database migrations (if any)
          # python migrate.py || true
          
          # Collect static files (if needed)
          # python manage.py collectstatic --noinput || true
          
          # Restart the application
          sudo systemctl restart ${{ env.APP_NAME }}
          sudo systemctl reload nginx
          
          # Check if service is running
          sudo systemctl is-active --quiet ${{ env.APP_NAME }} && echo "✅ App deployed successfully" || echo "❌ Deployment failed"

  notify:
    needs: [test, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      if: env.SLACK_WEBHOOK_URL != ''
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
